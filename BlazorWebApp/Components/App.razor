@using FSA.Cache.Models
@using FSA.Razor.Components.Helper
@using Microsoft.Extensions.Configuration

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="bootstrap/bootstrap.min.css" />
    
    @* <link rel="stylesheet" href="_content/Radzen.Blazor/css/material-base.css"> *@
    @* <link href=@Href rel="stylesheet" /> *@

    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="BlazorWebApp.styles.css" />
    <link rel="icon" type="image/png" href="favicon.png" />
    @* <HeadOutlet @rendermode="InteractiveServer" /> *@
    <RadzenTheme Theme="material" @rendermode="InteractiveServer" />
    @* <RadzenTheme Theme="@theme" @rendermode="InteractiveServer" /> *@
</head>

<body>
    <RadzenComponents @rendermode="InteractiveServer" />
    <Routes @rendermode="InteractiveServer" />
    <script src="_framework/blazor.web.js"></script>
    <script src="_content/Radzen.Blazor/Radzen.Blazor.js?v=@(typeof(Radzen.Colors).Assembly.GetName().Version)"></script>
    <script>
        window.blazorCulture = {
            get: () => localStorage['BlazorCulture'],
            set: (value) => localStorage['BlazorCulture'] = value
        };
    </script>
</body>

</html>

@code {
    // [Inject]
    // private ThemeService themeService { get; set; } = null!;

    // [Inject]
    // private IFSAAppCache appCache { get; set; } = null!;

    // string theme = string.Empty;
    // string Href = string.Empty;

    // private async Task<string> UpdateIcon()
    // {
    //     try
    //     {
    //         var responseCache = await appCache.GetItem<ThemeCache?>("FSASOWebTheme", CacheType.LocalStorage);
    //         if (responseCache != null)
    //             theme = responseCache.theme;
    //         else
    //             theme = "material";
    //         return theme;
    //     }
    //     catch (Exception)
    //     {
    //         return theme;
    //     }
    // }

    // protected override void OnInitialized()
    // {
    //     //UpdateIcon().GetAwaiter().GetResult();
    // }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         //await UpdateIcon();
    //     }
    // }
}