@using FSA.Cache.Models
@using FSA.Razor.Components.Helper
@using Microsoft.Extensions.Configuration

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="bootstrap/bootstrap.min.css" />

    @* Blazor.Bootstrap -Version 3.3.1 *@
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" rel="stylesheet" />
    <link href="_content/Blazor.Bootstrap/blazor.bootstrap.css" rel="stylesheet" />
    @* Blazor.Bootstrap -Version 3.3.1 *@
    
    @* <link rel="stylesheet" href="_content/Radzen.Blazor/css/material-base.css"> *@
    @* <link href=@Href rel="stylesheet" /> *@

    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="BlazorWebApp.styles.css" />
    <link rel="icon" type="image/png" href="favicon.png" />
    @* <HeadOutlet @rendermode="InteractiveServer" /> *@
    <RadzenTheme Theme="material" @rendermode="InteractiveServer" />
    @* <RadzenTheme Theme="@theme" @rendermode="InteractiveServer" /> *@
</head>

<body>
    <RadzenComponents @rendermode="InteractiveServer" />
    <Routes @rendermode="InteractiveServer" />
    <script src="_framework/blazor.web.js"></script>
    @* <script src="~/scripts/iframeInterop.js"></script> *@
    <script src="_content/RazorClassLibrary1/iframeInterop.js"></script>
    <script src="_content/Radzen.Blazor/Radzen.Blazor.js?v=@(typeof(Radzen.Colors).Assembly.GetName().Version)"></script>

    @* Blazor.Bootstrap -Version 3.3.1 *@
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
    <!-- Add chart.js reference if chart components are used in your application. -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.0.1/chart.umd.js" integrity="sha512-gQhCDsnnnUfaRzD8k1L5llCCV6O9HN09zClIzzeJ8OJ9MpGmIlCxm+pdCkqTwqJ4JcjbojFr79rl2F1mzcoLMQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <!-- Add chartjs-plugin-datalabels.min.js reference if chart components with data label feature is used in your application. -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-datalabels/2.2.0/chartjs-plugin-datalabels.min.js" integrity="sha512-JPcRR8yFa8mmCsfrw4TNte1ZvF1e3+1SdGMslZvmrzDYxS69J7J49vkFL8u6u8PlPJK+H3voElBtUCzaXj+6ig==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <!-- Add sortable.js reference if SortableList component is used in your application. -->
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
    <script src="_content/Blazor.Bootstrap/blazor.bootstrap.js"></script>
    @* Blazor.Bootstrap -Version 3.3.1 *@

    <script>
        window.blazorCulture = {
            get: () => localStorage['BlazorCulture'],
            set: (value) => localStorage['BlazorCulture'] = value
        };
    </script>
</body>

</html>

@code {
    [Inject]
    private ThemeService themeService { get; set; } = null!;

    [Inject]
    private IFSAAppCache appCache { get; set; } = null!;

    string theme = string.Empty;
    string Href = string.Empty;

    private async Task<string> UpdateIcon()
    {
        try
        {
            var responseCache = await appCache.GetItem<ThemeCache?>("FSASOWebTheme", CacheType.LocalStorage);
            if (responseCache != null)
                theme = responseCache.theme;
            else
                theme = "material";
            return theme;
        }
        catch (Exception)
        {
            return theme;
        }
    }

    protected override void OnInitialized()
    {
        //UpdateIcon().GetAwaiter().GetResult();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateIcon();
        }
    }
}