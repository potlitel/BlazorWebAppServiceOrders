@using FSA.Cache.Models
@using FSA.Razor.Components.Helper
@using Microsoft.Extensions.Configuration

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="bootstrap/bootstrap.min.css" />
    
    @* <link rel="stylesheet" href="_content/Radzen.Blazor/css/material-base.css"> *@
    <link href=@Href rel="stylesheet" />

    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="BlazorWebApp.styles.css" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <HeadOutlet @rendermode="InteractiveServer" />
    <RadzenTheme Theme="material" @rendermode="InteractiveServer" />
</head>

<body>
    <RadzenComponents @rendermode="InteractiveServer" />
    <Routes @rendermode="InteractiveServer" />
    <script src="_framework/blazor.web.js"></script>
    <script src="_content/Radzen.Blazor/Radzen.Blazor.js?v=@(typeof(Radzen.Colors).Assembly.GetName().Version)"></script>
    <script>
        window.blazorCulture = {
            get: () => localStorage['BlazorCulture'],
            set: (value) => localStorage['BlazorCulture'] = value
        };
    </script>
</body>

</html>

@code {
    [Inject]
    private ThemeService themeService { get; set; }

    [Inject]
    private IFSAAppCache appCache { get; set; }
    // private IComponentRenderMode? PageRenderMode
    // => string.IsNullOrEmpty(Configuration["FSAManagement:App:RenderMode"]) ? InteractiveServer : InteractiveWebAssembly;

    string Href = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // ThemeCache themeCache = await appCache.GetItem<ThemeCache>("FSASOWebTheme", CacheType.LocalStorage);
        // Href = $"_content/Radzen.Blazor/css/{themeCache.theme}.css";
        //await base.OnInitializedAsync();
        // await UpdateIcon();
        //FSAThemeService.Update().GetAwaiter().GetResult();
        // StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //ThemeCache themeCache = await appCache.GetItem<ThemeCache>("FSASOWebTheme", CacheType.LocalStorage);
            // Href = $"_content/Radzen.Blazor/css/{themeCache.theme}.css";
            // ThemeCache themeCache = await appCache.GetItem<ThemeCache>("FSAWebTheme", CacheType.LocalStorage);
            // if (themeCache != null)
            // {
            //    themeService.SetTheme(themeCache.theme);
            //    return;
            // }
            // StateHasChanged();
        }
    }

    // private async Task UpdateIcon()
    // {
    //     try
    //     {
    //         ThemeCache themeCache = await appCache.GetItem<ThemeCache>("FSASOWebTheme", CacheType.LocalStorage);
    //         Href = $"_content/Radzen.Blazor/css/{themeCache.theme}.css";
    //     }
    //     catch (Exception)
    //     {
    //     }
    // }
}