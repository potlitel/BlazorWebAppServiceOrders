@* @using FSA.Razor.Components.Components.Shared *@
@using FSA.Razor.Components.Components.Shared
@using RazorClassLibrary1.Areas.CustomMenu
@using RazorClassLibrary1.Helpers
@inherits LayoutComponentBase

@inject IJSRuntime JSRuntime


@* <div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div> *@

<FadeIn>
 <RadzenLayout>
    <RadzenHeader>
        <ChildContent>
            <RadzenRow JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center" Gap="0">
                <RadzenColumn Size="5">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenSidebarToggle Click="@ToggleSidebar" />
                           <RadzenLabel Text="Service Orders Basic Layout" Style="overflow: hidden; white-space: nowrap; text-overflow: ellipsis;" />
                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn Size="7">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                        <CustomMenu />
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>
        </ChildContent>
    </RadzenHeader>
    <RadzenSidebar Responsive="false" Style="width: max-content" @bind-Expanded="sidebarExpanded">
        <RadzenPanelMenu DisplayStyle="@(sidebarExpanded ? MenuItemDisplayStyle.IconAndText : MenuItemDisplayStyle.Icon)" ShowArrow="true">
            <RadzenPanelMenuItem Text="@(Localizer["Overview"])" Icon="home" Path="/" />
            <RadzenPanelMenuItem Text="@(Localizer["ServiceOrders"])" Icon="quick_reference" Path="serviceorders" />
            <RadzenPanelMenuItem Text="@(Localizer["ServiceOrdersTasks"])" Icon="quick_reference" Path="serviceordertasks" />
            <RadzenPanelMenuItem Text="@(Localizer["ServiceOrdersDocuments"])" Icon="quick_reference" Path="serviceorderdocuments" />
            <RadzenPanelMenuItem Text="@(Localizer["ServiceOrdersTasksDocuments"])" Icon="data_check" Path="serviceordertasksdocuments" />
            <RadzenPanelMenuItem Text="@(Localizer["ServiceOrdersFeatures"])" Icon="pin_drop" Path="serviceorderfeatures" />
            <RadzenPanelMenuItem Text="@(Localizer["ServiceOrdersRegisters"])" Icon="transform" Path="serviceorderregisters" />
            <RadzenPanelMenuItem Text="@(Localizer["Supplies"])" Icon="rule_settings" Path="supplies" />
            <RadzenPanelMenuItem Text="@(Localizer["Masters"])" Icon="tune">
                <RadzenPanelMenuItem Text="@(Localizer["Documenttypes"])" Icon="photo_auto_merge" Path="documentstypes" />
                <RadzenPanelMenuItem Text="@(Localizer["ServiceOrderTasksStates"])" Icon="history_edu" Path="serviceordertaskstates" />
                <RadzenPanelMenuItem Text="@(Localizer["ServiceOrderTypes"])" Icon="menu_book" Path="serviceordertypes" />
                <RadzenPanelMenuItem Text="@(Localizer["SupplyOperations"])" Icon="settings_motion_mode" Path="suppliesoperations" />
            </RadzenPanelMenuItem>
        </RadzenPanelMenu>
    </RadzenSidebar>
    <RadzenBody>
        <div class="rz-p-4">
            @Body
        </div>
    </RadzenBody>
    <RadzenFooter>
        Footer
    </RadzenFooter>
</RadzenLayout>
</FadeIn>

@* <RadzenComponents />

<RadzenLayout style="grid-template-areas: 'rz-sidebar rz-header' 'rz-sidebar rz-body';">
    <RadzenHeader>
        <RadzenRow JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center" Gap="0">
            <RadzenColumn Size="5">
                <RadzenSidebarToggle Click="@SidebarToggleClick"></RadzenSidebarToggle>
            </RadzenColumn>
            <RadzenColumn Size="7">
                <RadzenStack AlignItems="AlignItems.Center" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem" class="rz-px-2">
                    <RadzenAppearanceToggle />
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
    </RadzenHeader>
    <RadzenBody Expanded="@_sidebarExpanded">
        <RadzenRow class="rz-mx-auto rz-px-4 rz-pt-2 rz-pt-md-4 rz-pt-lg-6 rz-pt-xl-12 rz-pb-2 rz-pb-lg-12" Style="max-width: 1440px;">
            <RadzenColumn Size="12">
                @Body
            </RadzenColumn>
        </RadzenRow>
    </RadzenBody>


    @* --- START --*@

    @* <RadzenSidebar Expanded="@_sidebarExpanded" Responsive="true">
        <ChildContent>
            <RadzenStack AlignItems="Radzen.AlignItems.Center" class="rz-py-4 rz-py-lg-6" Style="padding: var(--rz-panel-menu-item-padding); border-bottom: var(--rz-panel-menu-item-border);">
                <RadzenImage Path="images/logo.png" style="width: 48px; height: 48px;" AlternateText="Application logo"></RadzenImage>
                <RadzenText Text="JV Demand" TextStyle="Radzen.Blazor.TextStyle.Subtitle1" class="rz-mb-0" style="color: var(--rz-sidebar-color);" />
            </RadzenStack>
            <RadzenStack AlignItems="Radzen.AlignItems.Start">
                <RadzenButton Icon="keyboard_double_arrow_right" Visible="@(_menuDisplayStyle==MenuItemDisplayStyle.Icon)" Click="@(args => { _menuDisplayStyle = MenuItemDisplayStyle.IconAndText; })" />
            </RadzenStack>
            <RadzenStack AlignItems="Radzen.AlignItems.End">
                <RadzenButton Icon="keyboard_double_arrow_left" Visible="@(_menuDisplayStyle==MenuItemDisplayStyle.IconAndText)" Click="@(args => { _menuDisplayStyle = MenuItemDisplayStyle.Icon; })" />
            </RadzenStack>
            <RadzenPanelMenu DisplayStyle="@_menuDisplayStyle">
                <RadzenPanelMenuItem Text="Home" Icon="Home" Path="" />
                <RadzenPanelMenuItem Text="Departments" Icon="diversity_3" Path="departments" />
                <RadzenPanelMenuItem Text="Vendors" Icon="person" Path="vendors" />
                <RadzenPanelMenuItem Text="Vendor Bundles" Icon="person_add" Path="vendor-bundles" />
                <RadzenPanelMenuItem Text="Vendor Licence Modules" Icon="group_add" Path="vendor-licence-modules" />
                <RadzenPanelMenuItem Text="Reports" Icon="lab_profile" Path="/reportindex" />
            </RadzenPanelMenu>
            <RadzenStack AlignItems="Radzen.AlignItems.Center" Gap="0" class="rz-py-4 rz-py-lg-6" Style="padding: var(--rz-panel-menu-item-padding);">
                <RadzenText Text="JV Demand v1.0.0" TextStyle="Radzen.Blazor.TextStyle.Caption" TagName="Radzen.Blazor.TagName.P" TextAlign="Radzen.TextAlign.Center" />
                <RadzenText Text="Copyright Ⓒ 2024" TextStyle="Radzen.Blazor.TextStyle.Caption" class="rz-mb-0" TagName="Radzen.Blazor.TagName.P" TextAlign="Radzen.TextAlign.Center" />
            </RadzenStack>
        </ChildContent>
    </RadzenSidebar>


    @* --- END --*@
@* </RadzenLayout> *@

@code {
    private bool _sidebarExpanded = true;
    private MenuItemDisplayStyle _menuStyle = MenuItemDisplayStyle.IconAndText;
    bool sidebarExpanded = true;

    SideBarHelper SideBarHelper = new();

    protected override async Task OnInitializedAsync()
    {
        //await FSAThemeService.Update();

        // SideBarHelper.IsMobile = await JSRuntime.InvokeAsync<bool>("isDevice");
        // if (SideBarHelper.IsMobile)
        //     SideBarHelper.Expanded = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FSAThemeService.Update();

            // SideBarHelper.IsMobile = await JSRuntime.InvokeAsync<bool>("isDevice");
            // if (SideBarHelper.IsMobile)
            //     SideBarHelper.Expanded = false;
        }
    }

    void ToggleSidebar()
    {
        sidebarExpanded = !sidebarExpanded;
        StateHasChanged();
    }

    MenuItemDisplayStyle _menuDisplayStyle = MenuItemDisplayStyle.IconAndText;

    void SidebarToggleClick()
    {
        _sidebarExpanded = !_sidebarExpanded;
    }

    void MenuToggleClick()
    {
        _menuStyle = _menuStyle == MenuItemDisplayStyle.IconAndText ? MenuItemDisplayStyle.Icon : MenuItemDisplayStyle.IconAndText;
    }
}