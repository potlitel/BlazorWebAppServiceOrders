@using System.Net
@inject TooltipService tooltipService


<RadzenIcon Icon="@(isConected ? "wifi" : "wifi_off")" MouseEnter="@(args => ShowTooltip(args, new TooltipOptions(){ Position = TooltipPosition.Bottom }))"></RadzenIcon>

@code {

    private bool isConected = true;

    private readonly CancellationTokenSource _timerCancellationToken = new();

    /// <summary>
    /// <see cref="OnAfterRenderAsync"/>: ...
    /// https://timmoth.com/posts/ZF2d7lLLn0aU8eWX31Sbnw
    /// </summary>
    /// <param name="firstRender">Boolean value</param>
    /// <returns>An instance of the <see cref="Task"/> object.</returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            using var timer = new PeriodicTimer(TimeSpan.FromSeconds(1));
            while (!_timerCancellationToken.IsCancellationRequested && await timer.WaitForNextTickAsync())
            {
                isConected = IsAddressAvailable("http://localhost:7002/swagger/index.html");
                await InvokeAsync(StateHasChanged);
            }
            // Make sure any subsequent logic is not called after the component is disposed
            return;
        }
        // You don't need to call base.OnAfterRenderAsync if your component derives directly from ComponentBase
        // await base.OnAfterRenderAsync(firstRender);
    }

    void ShowTooltip(ElementReference elementReference, TooltipOptions options = null) => 
        tooltipService.Open(elementReference, isConected ? "Connected to the service orders API." : "Service order API unavailable.", options);

    /// <summary>
    /// <see cref="Dispose"/>: ...
    /// </summary>
    public void Dispose()
    {
        _timerCancellationToken.Cancel();
        _timerCancellationToken.Dispose();
        GC.SuppressFinalize(this);
    }

    /// <summary>
    /// <see cref="IsAddressAvailable"/>: Obtiene un objeto de tipo ServiceOrderTask mediante su identificador.
    /// </summary>
    /// <param name="address">string value with url.</param>
    /// <returns></returns>
    public bool IsAddressAvailable(string address)
    {
        try
        {
            System.Net.WebClient client = new WebClient();
            client.DownloadData(address);
            return true;
        }
        catch
        {
            return false;
        }
    }
}
